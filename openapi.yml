openapi: 3.0.0
info:
  title: UNIMIB Modules
  description: UNIMIB Modules
  version: 0.0.1
servers:
  - url: http://unimibquestionari-env.eba-3behr9mi.eu-central-1.elasticbeanstalk.com/api
    description: UNIMIB Modules server
paths:
  /getUser/{id}:
    get:
      summary: Returns the User associated with the given id.
      parameters:
        - name: id
          in: path
          description: The id of the user
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
      responses:
        '500':
          description: Server Error.
        '404':
          description: User not found.
        '200':
          description: User with the given id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /getSurveysCreated:
    get:
      summary: Gets the surveys created by the user identified by the username.
      parameters:
        - name: username
          in: query
          description: the username of a user
          schema:
            type: string
            minimum: 1
            maximum: 1
      responses:
        '500':
          description: Server Error.
        '404':
          description: Survey not found.
        '200':
          description: Surveys created by the user identified with username
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfSurveys'
  /logInUser:
    post:
      summary: Logs the User into the website if the combination of username and password match.
      requestBody:
        required: true
        description: the DTO of a user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '500':
          description: Server Error.
        '404':
          description: User not found.
        '401':
          description: User not authorized.
        '200':
          description: User authorized.
  /signUpUser:
    post:
      summary: Create a new User.
      requestBody:
        required: true
        description: the DTO of a user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '500':
          description: Server Error.
        '200':
          description: User created.
  /findSurvey/{id}:
    get:
      summary: Returns the survey associated with the given id.
      parameters:
        - name: id
          in: query
          description: The id of the Survey
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
      responses:
        '500':
          description: Server Error.
        '200':
          description: Survey with the given id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Survey'
  /findSurveyNoQuestions/:
    get:
      summary: Returns the survey associated with the given id.
      responses:
        '500':
          description: Server Error.
        '404':
          description: No Survey without questions found.
        '200':
          description: Surveys with no questions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfSurveys'
  /findSurveyByText/{text}:
    get:
      summary: Gets the survey in the database where text is contained in the name of the survey
      parameters:
        - name: text
          in: path
          description: the text to be found in the name of the survey
          required: true
          schema:
            type : string
      responses:
        '500':
          description: Server Error.
        '404':
          description: Survey not found.
        '200':
          description: Survey with the text in the name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfSurveys'
  /findAllSurveys:
    get:
      responses:
        '500':
          description: Server Error.
        '404':
          description: Survey not found.
        '200':
          description: All Surveys in the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfSurveys'
  /addSurvey:
    post:
      summary: Creates a survey, with the given name and request's date-time, that is associated to the given user id
      requestBody:
        required: true
        description: the DTO of a survey
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Survey'
      responses:
        '500':
          description: Server Error.
        '200':
          description: Survey Created
  /modifySurvey:
    patch:
      summary: Modifies the survey's name associated with the given surveyDTO.
      requestBody:
        required: true
        description: the DTO of a survey
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Survey'
      responses:
        '500':
          description: Server Error.
        '200':
          description: Survey Modified
  /deleteSurvey/{id}:
    delete:
      summary: Deletes the survey associated with the given id.
      parameters:
        - name: id
          in: path
          description: The id of the survey that will be deleted
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
      responses:
        '500':
          description: Server Error.
        '404':
          description: Survey not found.
        '200':
          description: Survey deleted.
  /getQuestion/{id}:
    get:
      summary: Returns the Question associated with the given id.
      parameters:
        - name: id
          in: path
          description: The id of the question
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
      responses:
        '500':
          description: Server Error.
        '404':
          description: Question not found.
        '200':
          description: The Question identifid by Id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
  /getQuestion:
    get:
      summary: Returns all the Questions in the database.
      responses:
        '500':
          description: Server Error.
        '404':
          description: Question not found.
        '200':
          description: All Questions in the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfQuestions'
  /findQuestionsByText/{text}:
    get:
      summary: Returns the Question associated with the given id.
      parameters:
        - name: text
          in: path
          description: The text of the question to be found
          required: true
          schema:
            type : string
      responses:
        '500':
          description: Server Error.
        '404':
          description: Question not found.
        '200':
          description: The Question that contains the text.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfQuestions'
  /findQuestionForSurvey/{id}:
    get:
      summary: Returns the Question used by the survey associated with the given id.
      parameters:
        - name: id
          in: path
          description: The id of the survey
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
      responses:
        '500':
          description: Server Error.
        '404':
          description: Question not found.
        '200':
          description: The Question used in the survey identifid by Id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfQuestions'
  /addQuestion:
    post:
      summary: Creates a question, with the given text and id
      requestBody:
        required: true
        description: A QuestionDTO
        content:
          application/json:
            schema:
              $ref: '##/components/schemas/Question'
      responses:
        '500':
          description: Server Error.
        '200':
          description: Question added.
  /modifyQuestion:
    patch:
      summary: Modifies the question's text associated with the given id.
      requestBody:
        required: true
        description: A QuestionDTO
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
      responses:
        '500':
          description: Server Error.
        '200':
          description: Question added.
        '404':
          description: Question not found.
  /deleteQuestion/{id}:
    delete:
      summary: Deletes the question associated with the given id.
      parameters:
        - name: id
          in: path
          description: The id of the question that will be deleted
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
      responses:
        '500':
          description: Server Error.
        '200':
          description: Question deleted.
        '404':
          description: Question not found.
  /findAnswer/{id}:
    get:
      summary: Returns the Answer associated with the given id.
      parameters:
        - name: id
          in: path
          description: The id of the answer
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
      responses:
        '500':
          description: Server Error.
        '200':
          description: Answer associated with the given id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Answer'
        '404':
          description: Answer not found.
  /findSurveyAnswersForUser:
     get:
      summary: Finds all the Answer the User associated with userId has created for the Survey associated with surveyId.
      parameters:
        - name: surveyId
          in: query
          description: The id of the answer
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
        - name: userId
          in: query
          description: The id of the answer
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
      responses:
        '500':
          description: Server Error.
        '200':
          description: Answers the User associated with userId has created for the Survey associated with surveyId.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfAnswers'
        '404':
          description: Answer not found.
  /addAnswer:
    post:
      summary: Creates an Answer.
      description: An AnswerDTO
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Answer'
      responses:
        '500':
          description: Server Error.
        '200':
          description: Answer added.
  /modifyAnswer:
    patch:
      summary: Modifies an Answer.
      description: An AnswerDTO
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Answer'
      responses:
        '500':
          description: Server Error.
        '200':
          description: Answer Modified.
        '404':
          description: Answer not found.
  /deleteAnswer/{id}:
    delete:
      summary: Deletes the answer associated with the given id.
      parameters:
        - name: id
          in: path
          description: The id of the answer that will be deleted
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
      responses:
        '500':
          description: Server Error.
        '200':
          description: Answer deleted.
        '404':
          description: Answer not found.
  /findCloseEndedAnswer/{id}:
    get:
      summary: Returns the Close-ended Answer associated with the given id.
      parameters:
        - name: id
          in: path
          description: The id of the Close-ended answer
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
      responses:
        '500':
          description: Server Error.
        '200':
          description: Answer associated with the given id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloseEndedAnswer'
        '404':
          description: Answer not found.
  /addCloseEndedAnswe:
    post:
      summary: Creates an answer to a close-ended question.
      description: An CloseEndedAnswerDTO 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CloseEndedAnswer'
      responses:
        '500':
          description: Server Error.
        '200':
          description: Answer added.
  /modifyCloseEndedAnswer:
    patch:
      summary: Modifies the answer of a close-ended question associated with the given id, setting text as the answer.
      description: A CloseEndedAnswerDTO 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CloseEndedAnswer'
      responses:
        '500':
          description: Server Error.
        '200':
          description: Answer Modified.
        '404':
          description: Answer not found.
  /deleteCloseEndedAnswer/{id}:
    delete:
      summary: Deletes the close-ended answer associated with the given id.
      parameters:
        - name: id
          in: path
          description: The id of the answer that will be deleted
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
      responses:
        '500':
          description: Server Error.
        '200':
          description: Answer deleted.
        '404':
          description: Answer not found.
  /findCategory/{id}:
    get:
      summary: Gets the Category associated with the given id.
      parameters:
        - name: id
          in: path
          description: The id of the Close-ended answer
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
      responses:
        '500':
          description: Server Error.
        '200':
          description: The Category associated with the given id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category not found.
  /findCategories:
     get:
      summary: Gets all the categories
      responses:
        '500':
          description: Server Error.
        '200':
          description: All Categories in the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfCategory'
        '404':
          description: Category not found.
components:
  securitySchemes:
      BasicAuth:
        type: http
        scheme: basic
  schemas:
    User:
      type: object
      properties:
        username:
          type: string
          description: The username of the user
          example: JonDoe22
        email:
          type: string
          description: The email of the user
          example: john@johndoe.com
        password:
          type: string
          description: The password of the user
          example: CoolPassword22
        name:
          type: string
          description: The name of the user
          example: John
        surname:
          type: string
          description: The surname of the user
          example: Doe
      required:  
        - username
        - email
        - password
        - name
        - surname
    Survey:
      type: object
      properties:
        id:
          type: integer
          description: The id of the survey
          example: 1
        name:
          type: string
          description: The name of the survey
          example: Users name survey
      required:  
        - id
        - name
    Question:
      type: object
      properties:
        id:
          type: integer
          description: The id of the question
          example: 1
        text:
          type: string
          description: The text of the question
          example: What's your name?
      required:  
        - id
        - text
    Category:
      type: object
      properties:
        id:
          type: integer
          description: The id of the category
          example: 1
        name:
          type: string
          description: The name of the category
          example: Sport
      required:  
        - id
        - name
    Answer:
      type: object
      properties:
        id:
          type: integer
          description: The id of the answer
          example: 1
        text:
          type: string
          description: The text of the answer
          example: Dave
      required:  
        - id
        - text
    CloseEndedAnswer:
      type: object
      properties:
        id:
          type: integer
          description: The id of the answer
          example: 1
        text:
          type: string
          description: The text of the answer
          example: Red
        chosen:
          type: boolean
          description: Represents whether the user selected or not this closed-ended answer.
          default: false
          example: true
      required:  
        - id
        - text
    ArrayOfSurveys:
      type: array
      items:
        $ref: '#/components/schemas/Survey'
    ArrayOfQuestions:
      type: array
      items:
        $ref: '#/components/schemas/Question'
    ArrayOfAnswers:
      type: array
      items:
        $ref: '#/components/schemas/Answer'
    ArrayOfCategory:
      type: array
      items:
        $ref: '#/components/schemas/Category'
security:
  - BasicAuth: []